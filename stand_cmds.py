import disnake
import random as rnd
import time
from disnake.ext import commands
from main import collection_name_UserData
from stand_list import stands_lst
from stand_list import variations
from stand_list import explore_levels
# -------------------------------
embedshop=disnake.Embed(title="–ú–∞–≥–∞–∑–∏–Ω", description='1. –°—Ç—Ä–µ–ª–∞ - 800$\n2. –î–∏—Å–∫[—Å–±—Ä–æ—Å —Å—Ç–µ–Ω–¥–∞] - 100$\n\n–ß—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –≤–µ—â—å –ø—Ä–æ–ø–∏—à–∏—Ç–µ `stand_shop buy`', color=0xffff00)
embedshop.set_footer(text="–ü—Ä–æ–ø–∏—à–∏—Ç–µ stand_inv —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å!")
embeds=disnake.Embed(title="–°–ø–∏—Å–æ–∫ —Å—Ç–µ–Ω–¥–æ–≤", description="–£ –≤–∞—Å –Ω–µ—Ç—É –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—Ç–µ–Ω–¥–∞!", color=0xffff00)
# -------------------------------
class Standinfo(commands.Cog):

    def __init__(self, bot):
        self.bot = bot
    @commands.command(aliases=["info_stand"])
    @commands.cooldown(1, 4, commands.BucketType.user)
    async def stand_info(self, ctx, arg=1):
            try:
                channel = self.bot.get_channel(903703988225052762)
                await channel.send(embed=disnake.Embed(title='–í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: "stand_info"', description=f"`ID –ê–≤—Ç–æ—Ä–∞`: {ctx.author.id}\n`–ù–∏–∫ –ê–≤—Ç–æ—Ä–∞`: {ctx.author}\n`ID –°–µ—Ä–≤–µ—Ä–∞`: {ctx.guild.id}\n`–ù–∞–∑–≤–∞–Ω–∏–µ –°–µ—Ä–≤–µ—Ä–∞`: {ctx.guild}"))
            except Exception:
                pass
            if collection_name_UserData.count_documents({"_id": f"{ctx.author.id}"}) != 0:
                if arg < 1 or arg > 3:
                    return await ctx.send("–ù–æ–º–µ—Ä–æ–º —Å—Ç–µ–Ω–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3.")
                else:
                    get_st = collection_name_UserData.find_one({"_id": f"{ctx.author.id}"})["stands"]
                    try:
                        get_st = get_st[arg-1]
                        await ctx.send(embed=disnake.Embed(title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–µ–Ω–¥–µ", description=f"–í–∞—à —Å—Ç–µ–Ω–¥: **{stands_lst[get_st]}**", color=0xffff00))
                    except IndexError:
                        if arg == 2:
                            await ctx.send("–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ 1 –Ω–æ–º–µ—Ä —Å—Ç–µ–Ω–¥–∞!")
                        elif arg == 3:
                            await ctx.send("–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ 1 –∏–ª–∏ 2 –Ω–æ–º–µ—Ä —Å—Ç–µ–Ω–¥–∞!")
            else:
                await ctx.send("–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–µ–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `get_stand` —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Å—Ç–µ–Ω–¥!")
    @commands.command()
    @commands.cooldown(1, 4, commands.BucketType.user)
    async def stand_list(self, ctx):
        embeds.set_footer(text=f"–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–µ–Ω–¥, –Ω–∞–ø–∏—à–∏—Ç–µ $stand_get", icon_url=f"{ctx.message.author.avatar}")
        cnt = 0
        try:
            channel = self.bot.get_channel(903703988225052762)
            await channel.send(embed=disnake.Embed(title='–í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: "stand_list"', description=f"`ID –ê–≤—Ç–æ—Ä–∞`: {ctx.author.id}\n`–ù–∏–∫ –ê–≤—Ç–æ—Ä–∞`: {ctx.author}\n`ID –°–µ—Ä–≤–µ—Ä–∞`: {ctx.guild.id}\n`–ù–∞–∑–≤–∞–Ω–∏–µ –°–µ—Ä–≤–µ—Ä–∞`: {ctx.guild}"))
        except Exception:
            pass
        if collection_name_UserData.count_documents({"_id": f"{ctx.author.id}"}) != 0:
            lst = collection_name_UserData.find_one({"_id": f"{ctx.author.id}"})["stands"]
            if len(lst) != 0:
                await ctx.send(embed=disnake.Embed(title="–°–ø–∏—Å–æ–∫ —Å—Ç–µ–Ω–¥–æ–≤", description=f"\n".join([stands_lst[i] for i in lst]), color=0xffff00))
            else:
                return await ctx.send(embed=embeds)
        else:
            await ctx.send("–í–∞–º –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å —Ö–æ—Ç—è –±—ã 1 —Å—Ç–µ–Ω–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `get_stand`!")

    @commands.command()
    @commands.cooldown(1, 3600, commands.BucketType.user)
    async def stand_adventure(self, ctx):
        try:
            channel = self.bot.get_channel(903703988225052762)
            await channel.send(embed=disnake.Embed(title='–í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: "stand_adventure"', description=f"`ID –ê–≤—Ç–æ—Ä–∞`: {ctx.author.id}\n`–ù–∏–∫ –ê–≤—Ç–æ—Ä–∞`: {ctx.author}\n`ID –°–µ—Ä–≤–µ—Ä–∞`: {ctx.guild.id}\n`–ù–∞–∑–≤–∞–Ω–∏–µ –°–µ—Ä–≤–µ—Ä–∞`: {ctx.guild}"))
        except Exception:
            pass
        if collection_name_UserData.count_documents({"_id": f"{ctx.author.id}"}) != 0:
            get_num = rnd.randint(10, 75)
            random_num = [i for i in range(1, 4+1)]; random_num = rnd.choice(random_num)
            try:
                await ctx.send(embed=disnake.Embed(title="–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è", description=f"{variations[str(random_num)].format(str(get_num))}", color=0xffff00))
                collection_name_UserData.update_one({"_id": f"{ctx.author.id}"}, {"$inc": {"money": get_num}})
                if int(get_num) == 75:
                    collection_name_UserData.update_one({"_id": f'{ctx.author.id}'}, {"$push": {"achievements":"üé∞"}})
            except Exception as ee:
                print("Error:", ee)
        else: # –∞ —Ç–µ–ø–µ—Ä—å?
            await ctx.send("–í–∞–º –Ω—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã 1 —Å—Ç–µ–Ω–¥ —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!\n–ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É `stand_get` —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–µ–Ω–¥.")
    @commands.command(aliases=["stand_inventory"])
    @commands.cooldown(1, 4, commands.BucketType.user)
    async def stand_inv(self, ctx):
        try:
            channel = self.bot.get_channel(903703988225052762)
            await channel.send(embed=disnake.Embed(title='–í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: "stand_inv"', description=f"`ID –ê–≤—Ç–æ—Ä–∞`: {ctx.author.id}\n`–ù–∏–∫ –ê–≤—Ç–æ—Ä–∞`: {ctx.author}\n`ID –°–µ—Ä–≤–µ—Ä–∞`: {ctx.guild.id}\n`–ù–∞–∑–≤–∞–Ω–∏–µ –°–µ—Ä–≤–µ—Ä–∞`: {ctx.guild}"))
        except Exception:
            pass 
        if collection_name_UserData.count_documents({"_id": f"{ctx.author.id}"}) != 0:
            arrows_len = collection_name_UserData.find_one({"_id": f"{ctx.author.id}"})["arrows"] 
            money_len = collection_name_UserData.find_one({"_id": f"{ctx.author.id}"})["money"]
            disc_len = collection_name_UserData.find_one({"_id": f"{ctx.author.id}"})["discs"]
            await ctx.send(embed=disnake.Embed(title=f"–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞ {ctx.author}", description=f"**–ë–∞–ª–∞–Ω—Å:** {money_len}$\n**–°—Ç—Ä–µ–ª—ã:** {arrows_len}—à—Ç.\n**–î–∏—Å–∫–∏**: {disc_len}—à—Ç.", color=0xffff00))
        else:
            await ctx.send("–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–µ–Ω–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `get_stand` —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Å—Ç–µ–Ω–¥!")
    @commands.command()
    @commands.cooldown(1, 4, commands.BucketType.user)
    async def stand_shop(self, ctx, arg=None):
        try:
            channel = self.bot.get_channel(903703988225052762)
            await channel.send(embed=disnake.Embed(title='–í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: "stand_shop"', description=f"`ID –ê–≤—Ç–æ—Ä–∞`: {ctx.author.id}\n`–ù–∏–∫ –ê–≤—Ç–æ—Ä–∞`: {ctx.author}\n`ID –°–µ—Ä–≤–µ—Ä–∞`: {ctx.guild.id}\n`–ù–∞–∑–≤–∞–Ω–∏–µ –°–µ—Ä–≤–µ—Ä–∞`: {ctx.guild}"))
        except Exception:
            pass
        if arg is None:
            await ctx.send(embed=embedshop)
        elif arg.lower() == 'buy':
            await ctx.send("–û—Ç–ø—Ä–∞–≤—å—Ç–µ **1** –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —Å—Ç—Ä–µ–ª—É;\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ **2** –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –¥–∏—Å–∫ —Å–±—Ä–æ—Å–∞ —Å—Ç–µ–Ω–¥–∞")
            player_choice = await self.bot.wait_for('message', check=lambda message: "1" if message.content == "1" else "2")
            msgg1 = player_choice.content
            if msgg1 == '1' and collection_name_UserData.count_documents({"_id": f"{ctx.author.id}"}) != 0:
                if not collection_name_UserData.find_one({"_id": f"{ctx.author.id}"})["money"] - 800 < 0:
                    await ctx.send("–°—Ç—Ä–µ–ª–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —É –≤–∞—Å, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π `stand_inv`.")
                    collection_name_UserData.update_one({"_id": f'{ctx.author.id}'}, {"$inc": {"money": -800}})
                    collection_name_UserData.update_one({"_id": f'{ctx.author.id}'}, {"$inc": {"arrows": 1}})
                else:
                    return await ctx.send("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!")
            elif msgg1 == '2' and collection_name_UserData.find_one({"_id": f'{ctx.author.id}'}) != 0:
                if not collection_name_UserData.find_one({"_id": f"{ctx.author.id}"})["money"] - 100 < 0:
                    await ctx.send("–î–∏—Å–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —É –≤–∞—Å, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π `stand_inv`.")
                    collection_name_UserData.update_one({"_id": f'{ctx.author.id}'}, {"$inc": {"money": -100}})
                    collection_name_UserData.update_one({"_id": f'{ctx.author.id}'}, {"$inc": {"discs": 1}})
                else:
                    return await ctx.send("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!")
            else:
                return await ctx.send("–£ –≤–∞—Å –Ω–µ—Ç—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –≤–∞–º –Ω—É–∂–µ–Ω —Å—Ç–µ–Ω–¥\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–µ–Ω–¥ –ø—Ä–æ–ø–∏—à–∏—Ç–µ `stand_get`.")
        else:
            await ctx.send("–í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            
    @commands.command()
    @commands.cooldown(1, 4, commands.BucketType.user) 
    async def stand_reset(self, ctx, stndt: int):
        try:
            channel = self.bot.get_channel(channel_id_logs)
            await channel.send(embed=disnake.Embed(title='–í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: "stand_reset"', description=f"`ID –ê–≤—Ç–æ—Ä–∞`: {ctx.author.id}\n`–ù–∏–∫ –ê–≤—Ç–æ—Ä–∞`: {ctx.author}\n`ID –°–µ—Ä–≤–µ—Ä–∞`: {ctx.guild.id}\n`–ù–∞–∑–≤–∞–Ω–∏–µ –°–µ—Ä–≤–µ—Ä–∞`: {ctx.guild}"))
        except Exception:
            pass
        if collection_name_UserData.count_documents({"_id": f"{ctx.author.id}"}) != 0:
            discs = collection_name_UserData.find_one({"_id": f"{ctx.author.id}"})["discs"]
            if stndt > 3 or stndt < 1:
                return await ctx.send("–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç–µ–Ω–¥–∞!")
            elif discs < 1: # –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–¥–µ–ª–∞–ª –∫—Å—Ç–∞, —ç—Ç–æ –Ω–∞–¥–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –µ—Å–ª–∏ –≤—Å—ë –Ω–æ—Ä–º–∞–ª—å–Ω–æ –≤ –≤–µ—Ä—Ö–Ω–µ–º —É—Å–ª–æ–≤–∏–∏, —Ç–æ –µ—Å—Ç—å —ç—Ç–æ –≤–Ω–∏–∑ –≤ else 
                return await ctx.send("–£ –≤–∞—Å –Ω–µ—Ç –¥–∏—Å–∫–æ–≤! –ö—É–ø–∏—Ç–µ –∏—Ö –≤ –º–∞–≥–∞–∑–∏–Ω–µ, –≤–≤–µ–¥—è –∫–æ–º–∞–Ω–¥—É `$stand_shop`")
            else:
                stand_get = collection_name_UserData.find_one({"_id": f"{ctx.author.id}"})["stands"]
                try:
                    del stand_get[stndt-1]
                    collection_name_UserData.update_one({"_id": f"{ctx.author.id}"}, {"$set": {"stands": stand_get}})
                    await ctx.send("–í–∞—à —Å—Ç–µ–Ω–¥ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω.")
                except IndexError:
                    if stndt == 2:
                        await ctx.send("–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ 1 –Ω–æ–º–µ—Ä —Å—Ç–µ–Ω–¥–∞!")
                    elif stndt == 3:
                        await ctx.send("–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ 1 –∏–ª–∏ 2 –Ω–æ–º–µ—Ä —Å—Ç–µ–Ω–¥–∞!")
        else:
            return await ctx.send("–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤–∞–º –Ω—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã 1 —Å—Ç–µ–Ω–¥\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `stand_get`")
# -------------------------------
def setup(bot):
    bot.add_cog(Standinfo(bot)) 
    print("–ü–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–≥ –∏–Ω—Ñ–æ —Å—Ç–µ–Ω–¥–∞!")